from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.keyboars import action_choose
from app.validators import Validators

router = Router()

# HANDLE COMMAND START
@router.message(CommandStart())
async def cmd_start(message: Message):
    welcome_text = """
     <b>    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –ª–∞–±!üëã</b>
     
    –î–∞–Ω–Ω—ã–π –±–æ—Ç, –∫–∞–∫ –Ω–µ—Ç—Ä—É–¥–Ω–æ –¥–æ–≥–∞–¥–∞—Ç—å—Å—è, –ø–æ–∑–≤–æ–ª—è–µ—Ç
    –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ–Ω–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–¥–∞—á–∏ –ª–∞–±—ã.
    
    üìå <i>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</i>
    1. –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
    2. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å
    3. –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å

    –ü–µ—Ä–≤—ã–π –∑–∞–ø–∏—Å–∞–≤—à–∏–π—Å—è —Å–¥–∞—ë—Ç –ø–µ—Ä–≤—ã–º!ü§ì
    """
    await message.answer(welcome_text, parse_mode="HTML", reply_markup=action_choose)
    
    
    
# OBLIGATORY FORM
class RegStudent(State):
    name_fio = State()
    lab_number = State()
    sub_group = State()
    git_hub_link = State()


# HANDLE COMMAND PUSH TO QUEUE

@router.message(F.text.startswith("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"))
async def cmd_push(message: Message, state: FSMContext):
    state.set_state(RegStudent.name_fio)
    message.answer("–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å!\n–í–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ok or no buttons
    message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ñ–∏–æ (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)")
    
@router.message(RegStudent.name_fio)
async def set_fio(message: Message, state: FSMContext):
    if not Validators.valid_fio(message.text): #validators file?
        message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        return

    await state.update_data(name_fio=message.text)
    await state.set_state(RegStudent.lab_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    


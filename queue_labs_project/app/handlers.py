from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import app.keyboars as kb 
from app.validators import Validators
import app.database.requests as rq
from app.database.models import Student
from app.logging import log_event
from app.locals.memory import load_admins, save_admins
from app.auxiliary import get_user_info
# from config import ADMINS as admin_1

ADMINS = load_admins()

router = Router()

# HANDLE COMMAND START
@router.message(CommandStart())
async def cmd_start(message: Message):
    log_event(message, "/start")
    welcome_text = """
     <b>    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –ª–∞–±!üëã</b>
     
    –î–∞–Ω–Ω—ã–π –±–æ—Ç, –∫–∞–∫ –Ω–µ—Ç—Ä—É–¥–Ω–æ –¥–æ–≥–∞–¥–∞—Ç—å—Å—è, –ø–æ–∑–≤–æ–ª—è–µ—Ç
    –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ–Ω–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–¥–∞—á–∏ –ª–∞–±—ã.
    
    üìå <i>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</i>
    1. –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
    2. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å
    3. –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å
    
    –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ø—Ä–∞–≤–æ–∫
    –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/help</b>

    –ü–µ—Ä–≤—ã–π –∑–∞–ø–∏—Å–∞–≤—à–∏–π—Å—è —Å–¥–∞—ë—Ç –ø–µ—Ä–≤—ã–º!ü§ì
    """
    await message.answer(welcome_text, parse_mode="HTML", reply_markup=kb.action_choose)
    
    
@router.message(Command("help"))
async def cmd_help(message: Message):
    log_event(message)
    help_text = """
    <b>üìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>

    <b>–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /delete - –£–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
    /find - –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É

    <b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>
    /admin - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
    /admins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
    /add_admin- –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
    /del_admin - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞
    
     <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>
     /about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
     
    <i>–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é</i>
    """
  
    await message.answer(help_text, parse_mode="HTML")
    
    
    
    
    
# OBLIGATORY REGISTER FORM 
class RegStudent(StatesGroup):
    name_fio = State()
    lab_number = State()
    sub_group = State()
    github_link = State()
    
    
# OBLIGATORY LabNumber FORM   
class LabNumber(StatesGroup):
    lab_number = State()


class UserData(StatesGroup):
    search_param = State()
    user_credentials = State()
    
    
    
    
    
    
    
    # CANCEL IMPLEMENTATION
@router.message(F.text.startswith("–û—Ç–º–µ–Ω–∞"))
async def cancel(message: Message, state: FSMContext):
    log_event(message)
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ‚úÖ",
        )    
    return
    
    
@router.message(Command("about"))
async def about(message: Message, bot: Bot):
    log_event(message, "/about")
    sticker_id = "CAACAgIAAxkBAAIGVWh8LR9YcoPVjBgqQ1008Qub7c8GAALwZgACFJJoSg5uXuOo5IbFNgQ"
    
    about_text = """
    
üìÇ <b>Previewk</b>:
- Hello, I'm the <b>founder & developer</b> of this project.
- Username: @novac_jr

üîß <b>Tech Stack</b>:
- Built with üêç Python using <b>Aiogram</b> framework
- Deployed on <b>Not yet</b> 
- Database: <b>SQLite/PostgreSQL</b>

üíª <b>My GitHub</b>: 
<a href="https://github.com/jegorix">github.com/jegorix</a>

üìö <b>Features</b>:
- Queue management system
- Admin controls
- Real-time updates

üöÄ The bot is constantly evolving!
    """
    
    await message.answer(about_text, parse_mode="HTML", disable_web_page_preview=True)
    
    await bot.send_sticker(
        chat_id=message.chat.id,
        sticker = sticker_id
    )


# @router.message(F.sticker)
# async def get_sticker_id(message: Message):
#     sticker_id = message.sticker.file_id
#     await message.answer(f"Sticker id: {sticker_id}")



# HANDLE COMMAND PUSH TO QUEUE
@router.message(F.text.startswith("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"))
async def cmd_push(message: Message, state: FSMContext):
    log_event(message)
    await state.set_state(RegStudent.name_fio)
    await message.answer("–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å!\n–í–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ok or no buttons
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ñ–∏–æ (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)")
    
    
@router.message(RegStudent.name_fio)
async def set_fio(message: Message, state: FSMContext):
    log_event(message)
    if not Validators.fio_validate(message.text): #validator
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        return

    await state.update_data(name_fio=message.text)
    await state.set_state(RegStudent.lab_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    
    
@router.message(RegStudent.lab_number)
async def set_lab_number(message: Message, state: FSMContext):
    log_event(message)
    number = Validators.lab_number_validate(message.text)
    if not number:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å—Ç–æ!")
        return
    
    await state.update_data(lab_number=number)
    await state.set_state(RegStudent.sub_group)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã")
    
    
@router.message(RegStudent.sub_group)
async def set_subgroup(message: Message, state: FSMContext):
    log_event(message)
    sub_group_number = Validators.sub_group_validate(message.text)
    
    if not sub_group_number:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2!")
        return
    
    await state.update_data(sub_group=sub_group_number)
    await state.set_state(RegStudent.github_link)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å —Å–∞–π—Ç–∞ github —Å –≤–∞—à–∏–º –∫–æ–¥–æ–º")
    
    
    
@router.message(RegStudent.github_link)
async def get_github_link(message: Message, state: FSMContext):
    log_event(message)
    github_link = Validators.github_link_validate(message.text)
    if not github_link:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å")
        return
    
    await state.update_data(github_link=github_link)
    
    student_data = await state.get_data()
    
    student_text = f"""
     <b>    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>
     
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –±—É–¥—É—Ç
    –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å.
    
    üìå <i>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}:</i>
    1. –§–ò–û: {student_data['name_fio']}
    2. –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ{student_data['lab_number']}
    3. –ü–æ–¥–≥—Ä—É–ø–ø–∞-{student_data['sub_group']}
    4. –°—Å—ã–ª–∫–∞ –Ω–∞ github:\n  {student_data['github_link']}

    –î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?
    """
    await message.answer(student_text, parse_mode="HTML", reply_markup=kb.approve_data, disable_web_page_preview=True)
    
    
    
    # INLINE YES APPROVEMENT -> ADD STUDENT TO THE DATABASE
@router.callback_query(F.data == "approve_yes")
async def approve_yes(callback: CallbackQuery, state: FSMContext):
    log_event(callback, "–í –æ—á–µ—Ä–µ–¥—å –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—á–µ—Ä–µ–¥—å...")
    student_data = await state.get_data()
    
    try:
        await rq.add_student(
            user_tg_id=callback.from_user.id,
            username=callback.from_user.username,
            name_fio=student_data['name_fio'],
            lab_number=student_data['lab_number'],
            sub_group=student_data['sub_group'],
            github_link=student_data['github_link']
        )

        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å!üéâ\n"
                                      "–í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ\n'–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏üëÄ'",
                                      reply_markup=kb.action_choose,
                                      parse_mode='HTML',
                                      disable_web_page_preview=True)
        
    
    except Exception as e:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö‚ùå\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=kb.action_choose,
                                      parse_mode='HTML',
                                      disable_web_page_preview=True)
        
        print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ë–î: {e}\n")
        
    finally:
        await state.clear()
        
        
    
    #INLINE NO APPROVEMENT
@router.callback_query(F.data == "approve_no")
async def approve_no(callback: CallbackQuery, state: FSMContext):
    log_event(callback,"approve_no")
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("–û—Ç–º–µ–Ω–∞...")
    await state.clear()
    await callback.message.edit_text("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω!\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–Ω–ø–∫—É\n'–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—åüî•'")
    
    
    
    
    
    
 # QUEUE SHOWING
@router.message(F.text.startswith("–ü—Ä–æ—Å–º–æ—Ç—Ä"))
async def show_menu(message: Message):
    log_event(message)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏", reply_markup=kb.show_queue_method)
    
    
    
async def viewing_message(callback: CallbackQuery | Message, students: list[Student], responce: list[str]) -> list[str]:
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—á–µ—Ä–µ–¥–∏...")
    log_event(callback)
    if not students:
        await callback.message.answer("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!")
        return responce
    
    for idx, student in enumerate(students, start=1):
        time_str = student.created_at.strftime('%d.%m –≤ %H:%M')
        responce.append(
            f"{idx}. {student.name_fio} - ({student.username})\n"
            f"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ{student.lab_number}\n"
            f"–ü–æ–¥–≥—Ä—É–ø–ø–∞-{student.sub_group}\n"
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ github:\n{student.github_link}\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω {time_str}\n"
        )
    
    return responce
    
    
    
@router.callback_query(F.data == "quick_show")
async def quick_show(callback: CallbackQuery):
    log_event(callback)
    students = await rq.get_students_sorted(sort_by_time=True)
    
    responce = ["<b>–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</b>\n"]

    updated_responce = await viewing_message(callback, students, responce)
    
    if updated_responce:
        await callback.message.answer("\n\n".join(updated_responce), parse_mode="HTML", disable_web_page_preview=True)



@router.callback_query(F.data.startswith("sub_group-"))
async def sub_group_show(callback: CallbackQuery):
    log_event(callback)
    group_number = int(callback.data.split("-")[1])
    students = await rq.get_students_sorted(sub_group=group_number)
    responce = [f"<b>–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ –Ω–æ–º–µ—Ä—É –ø–æ–¥–≥—Ä—É–ø–ø—ã\n\n–ü–æ–¥–≥—Ä—É–ø–ø–∞-{group_number}</b>\n"]
    updated_responce = await viewing_message(callback, students, responce)
    
    if updated_responce:
        await callback.message.answer("\n\n".join(updated_responce), parse_mode="HTML", disable_web_page_preview=True)


@router.callback_query(F.data == "lab_number_show")
async def lab_number_show(callback: CallbackQuery, state: FSMContext):
    log_event(callback)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    await state.set_state(LabNumber.lab_number)
    
    
@router.message(LabNumber.lab_number)
async def get_lab_number(message: Message, state: FSMContext):
    log_event(message)
    number = Validators.lab_number_validate(message.text)
    if not number:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    
    await state.clear()
    
    students = await rq.get_students_sorted(lab_number=number)
    responce = [f"<b>–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ –Ω–æ–º–µ—Ä—É –ª–∞–±—ã\n–õ–∞–±–∞ ‚Ññ{number}</b>\n"]
    
    updated_responce = await viewing_message(message, students, responce)
    
    if updated_responce:
        await message.answer("\n\n".join(updated_responce), parse_mode="HTML", disable_web_page_preview=True)
    
    
    
    
    
     # HANDLE COMMAND FIND STUDENT
@router.message(Command("find"))
async def cmd_find_student(message: Message, state: FSMContext):
    log_event(message, "/find")
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞", reply_markup=kb.find_student_method)


@router.callback_query(F.data.startswith("find_by-"))
async def handle_finding(callback: CallbackQuery, state: FSMContext):
    log_event(callback)
    await callback.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
    param = callback.data.split('-')[1]
    await state.update_data(search_param=param)
    
    param = "—Ñ–∞–º–∏–ª–∏—é" if param == "surname" else param
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ {param} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏")
    await state.set_state(UserData.user_credentials)
        
    

@router.message(UserData.user_credentials)
async def get_user_credentials(message: Message, state: FSMContext):
    log_event(message)
    data = await state.get_data()
    param = data['search_param']
    search_value = message.text
    students = None

    
    if param == "id":
        id = Validators.lab_number_validate(message.text)
        if not id:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç telegram id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            return
            
        students = await rq.get_student_id_or_username(user_tg_id=id)
    
    
    elif param == "username":
        students = await rq.get_student_id_or_username(username=search_value)
        
    elif param == "surname":
        param = "—Ñ–∞–º–∏–ª–∏–∏"
        students = await rq.get_student_id_or_username(surname=search_value)
        
    if not students:
        param = "—Ñ–∞–º–∏–ª–∏–µ–π" if param == "—Ñ–∞–º–∏–ª–∏–∏" else param
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å {param}: {search_value} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await state.clear()
        return
        
    responce = [f"<b>–ù–∞–π–¥–µ–Ω–æ {len(students)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {param}: {search_value}</b>\n\n"]

    responce = await viewing_message(message, students, responce)
    
    if responce:
        await message.answer("\n".join(responce), parse_mode="HTML", disable_web_page_preview=True)

    await state.clear()
    
    
    
class HandleDelete(StatesGroup):
    user_data = State()
    lab = State()    
    is_delete_all = State()
    is_admin = State()
    
    
    
# DELETE STUDENT FROM QUEUE
@router.message(F.text.startswith("–£–¥–∞–ª–∏—Ç—å—Å—è"))
async def delete_from_queue(message: Message, state: FSMContext):
    log_event(message)
    
    current_user = await rq.get_student_id_or_username(user_tg_id=message.from_user.id)
    if not current_user:
        await message.answer("‚ùå –í–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏!\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        await state.clear()
        return
    
    await state.clear()
    await state.update_data(current_user_id=current_user[0].user_tg_id)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=kb.delete_student_method)
    
    
@router.callback_query(F.data.startswith("delete_by-"))
async def handle_deleting(callback: CallbackQuery, state: FSMContext):
    log_event(callback)
    await callback.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
    param = callback.data.split('-')[1]
    await state.update_data(search_param=param)
    
    param = "—Ñ–∞–º–∏–ª–∏—é" if param == "surname" else param
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ {param} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    await state.set_state(HandleDelete.user_data)
    
    
    
@router.message(HandleDelete.user_data)
async def handle_credentials(message: Message, state: FSMContext):
    log_event(message)
    data = await state.get_data()
    param = data["search_param"]
    value = message.text
    current_user_id = data.get("current_user_id")

    if param == "id":
        id = Validators.lab_number_validate(value)
        if not id:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç telegram id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
            return
        
        if int(value) != current_user_id:
            await message.answer("‚ùå –í–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏!\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            await state.clear()
            return
        
        value = int(value)
        await state.update_data(user_credentials=value)
    
    else:
        await state.update_data(user_credentials=value)
        
    
    if data.get("is_delete_all", False):
        
        students = await rq.get_student_id_or_username(**{param: value})
        
        if not students:
            await message.answer("‚ùå –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await state.clear()
            return
        
        if any(s.user_tg_id != current_user_id for s in students):
            await message.answer("‚ùå –í–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏!\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            await state.clear()
            return
        
        deleted_count = await rq.delete_student(data=value, delete_all=True, param=param)
        log_event(message, f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
        await state.clear()
        await message.answer(
        f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count} –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É {param}: {value}" if deleted_count > 0
        else "‚ùå –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        ) 
        return 
    
        
    await state.set_state(HandleDelete.lab)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∞–±—ã —É–¥–∞–ª—è–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    
    
    
@router.message(HandleDelete.lab)
async def get_lab_num(message: Message, state: FSMContext):
    log_event(message)
    if not Validators.lab_number_validate(message.text):
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∞–±—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        return
    
    data = await state.get_data()
    param = data["search_param"]
    delete_user_data = data["user_credentials"]
    lab_number = message.text
    
    is_admin = message.from_user.id in ADMINS
    
    
    current_user: list[Student] = await rq.get_student_id_or_username(user_tg_id=message.from_user.id)
    
    current_user_id: int | str = current_user[0].user_tg_id
    
    
    kwargs = {
        "lab_number": lab_number,
        param: delete_user_data
    }
    
    
    # if param == "id":
    #    kwargs["user_tg_id"] = delete_user_data
        
    # elif param == "username":
    #     kwargs["username"] = delete_user_data
        
    # elif param == "surname":
    #     kwargs["surname"] = delete_user_data
        
    
   
    
    
    students = await rq.get_student_id_or_username(**kwargs)
    
    if not is_admin:
        students = [student for student in students if student.user_tg_id == current_user_id]
        if not students:
            await message.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏")
            await state.clear()
            return
        
    if not students:
       await message.answer("‚ùå –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
       await state.clear()
       return
        
    
    responce = [f"<b>–ù–∞–π–¥–µ–Ω–æ {len(students)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {param}: {delete_user_data}\n–õ–∞–±–∞ ‚Ññ{lab_number}</b>\n\n"]
    responce = await viewing_message(message, students, responce)
    
    log_event(message, "–ò–∑ –æ—á–µ—Ä–µ–¥–∏ —É–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    
    if responce:
        await message.answer("\n".join(responce), parse_mode="HTML", disable_web_page_preview=True)
        
        
    
    
    
    if students:
        if param in ["id", "username"]:
            deleted_count = await rq.delete_student(**kwargs)
        else:
            deleted_count = await rq.delete_students_by_id(
                [s.user_tg_id for s in students],
                lab_number
            )
    else:
        deleted_count = 0
         
         
    response = (
        f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}" if deleted_count > 0
        else "‚ùå –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    )     

    await message.answer(response)
    await state.clear()
    

    

# DELETE ALL RECORDS FROM USER
@router.message(Command("delete"))
async def cmd_delete(message: Message, state: FSMContext):
   log_event(message, "/delete")
   
   is_admin = message.from_user.id in ADMINS
   
   current_user = await rq.get_student_id_or_username(user_tg_id=message.from_user.id)
   if not current_user:
        await message.answer("‚ùå –í–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏!\n–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        await state.clear()
        return
       
   
   await state.clear()
   await state.update_data(is_delete_all=True,
                           is_admin=is_admin)
   
   text = (
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –í–°–ï–• –∑–∞–ø–∏—Å–µ–π\n"
        "‚ö†Ô∏è –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!" if is_admin else
        "–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏"
    )
   
   await message.answer(text, reply_markup=kb.delete_student_method)

class AddAdmin(StatesGroup):
    admin_set = State()
    admin_reset = State()
    
    
    # ADMIN ADD AND REMOVE LOGIC
@router.message(Command("add_admin"))
async def add_admin(message: Message, state: FSMContext):
    log_event(message)
    is_admin = message.from_user.id
    
    if is_admin not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
        return
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º")
    await state.set_state(AddAdmin.admin_set)
    
    
@router.message(AddAdmin.admin_set)
async def admin_set(message: Message, state: FSMContext, bot: Bot):
    log_event(message)
    new_admin_id = Validators.lab_number_validate(message.text)
    
    if not new_admin_id:
        await message.relpy("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
        
    ADMINS.add(new_admin_id)
    save_admins(ADMINS)
    log_event(message, "–î–û–ë–ê–í–õ–ï–ù –ù–û–í–´–ô –ê–î–ú–ò–ù")
    user_info = await get_user_info(bot, [new_admin_id])
    user_id, name, username = user_info[0]
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name if name else new_admin_id}({username if username else new_admin_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã!")
    await state.clear()
    
        
        
        
        #DELETE ADMIN
@router.message(Command("del_admin"))
async def remove_admin(message: Message, bot: Bot):
    log_event(message)
    is_admin = message.from_user.id
    
    if is_admin not in ADMINS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ª–∏—à–∏—Ç—å –ø—Ä–∞–≤–∞ –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º", reply_markup=await kb.inline_admins(bot))
    


@router.callback_query(F.data.startswith("userid_"))
async def admin_reset(callback: CallbackQuery, bot: Bot):
    log_event(callback.message)
    rm_admin_id = int(callback.data.split("_")[1])
    print(rm_admin_id)
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞...")
   
    if rm_admin_id not in ADMINS:
        await callback.message.reply("‚ùå –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º!")
   
    ADMINS.remove(rm_admin_id)
    save_admins(ADMINS)
    log_event(callback.message, "–£–î–ê–õ–ï–ù –ê–î–ú–ò–ù")
    user_info = await get_user_info(bot, [rm_admin_id])
    user_id, name, username = user_info[0]
    # –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è —É–¥–∞–ª—è–µ–º–æ–º—É –∞–¥–º–∏–Ω
    await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name if name else user_id}({username if username else user_id}) —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")
    
    
    
    
@router.message(Command("admins"))
async def show_admins(message: Message, bot: Bot):
    log_event(message)
    
    current_admins = load_admins()
    
    if not current_admins:
        await message.answer("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.")
        return
    
    admins_info = await get_user_info(bot, list(current_admins))
    if not admins_info:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∞—Ö.")
        return
    
    admins_list = "\n".join(
        f"‚Ä¢ {firstname} (@{username}) - id: {user_id}" if username else f"‚Ä¢ {firstname} - id: {user_id}"
        for user_id, firstname, username in admins_info
        )
    
    await message.answer(f"üìå –ê–¥–º–∏–Ω—ã:\n{admins_list}")
    
    
    
@router.message(Command("admin"))
async def admins_approve(message: Message):
    log_event(message)
    current_admins = load_admins()
    if int(message.from_user.id) in current_admins:
        await message.answer("‚úÖ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!")
        return
    await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º!")
    
    

    
    
    
# –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω–∞
# –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö /add_admin –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
# –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—á–∞—Ç–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ middleware


#     from datetime import datetime

# # –ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
# create_time = student.create_at.strftime("%d.%m.%Y %H:%M")
# await message.answer(f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å –≤ {create_time} (–ú–°–ö)")
    

    # await rq.add_student()
    
    
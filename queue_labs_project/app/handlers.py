from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.keyboars import action_choose, approve_data
from app.validators import Validators
import app.database.requests as rq
router = Router()

# HANDLE COMMAND START
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    # state.clear()
    welcome_text = """
     <b>    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –ª–∞–±!üëã</b>
     
    –î–∞–Ω–Ω—ã–π –±–æ—Ç, –∫–∞–∫ –Ω–µ—Ç—Ä—É–¥–Ω–æ –¥–æ–≥–∞–¥–∞—Ç—å—Å—è, –ø–æ–∑–≤–æ–ª—è–µ—Ç
    –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ–Ω–ª–∞–π–Ω –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å–¥–∞—á–∏ –ª–∞–±—ã.
    
    üìå <i>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</i>
    1. –í—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
    2. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å
    3. –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å

    –ü–µ—Ä–≤—ã–π –∑–∞–ø–∏—Å–∞–≤—à–∏–π—Å—è —Å–¥–∞—ë—Ç –ø–µ—Ä–≤—ã–º!ü§ì
    """
    await message.answer(welcome_text, parse_mode="HTML", reply_markup=action_choose)
    
    
    
# OBLIGATORY FORM
class RegStudent(StatesGroup):
    name_fio = State()
    lab_number = State()
    sub_group = State()
    github_link = State()






# HANDLE COMMAND PUSH TO QUEUE
@router.message(F.text.startswith("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"))
async def cmd_push(message: Message, state: FSMContext):
    await state.set_state(RegStudent.name_fio)
    await message.answer("–•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å!\n–í–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤")
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ok or no buttons
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ñ–∏–æ (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)")
    
    
@router.message(RegStudent.name_fio)
async def set_fio(message: Message, state: FSMContext):
    if not Validators.fio_validate(message.text): #validator
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")
        return

    await state.update_data(name_fio=message.text)
    await state.set_state(RegStudent.lab_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
    
    
@router.message(RegStudent.lab_number)
async def set_lab_number(message: Message, state: FSMContext): 
    number = Validators.lab_number_validate(message.text)
    if not number:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å—Ç–æ!")
        return
    
    await state.update_data(lab_number=number)
    await state.set_state(RegStudent.sub_group)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã")
    
    
@router.message(RegStudent.sub_group)
async def set_subgroup(message: Message, state: FSMContext):
    sub_group_number = Validators.sub_group_validate(message.text)
    
    if not sub_group_number:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2!")
        return
    
    await state.update_data(sub_group=sub_group_number)
    await state.set_state(RegStudent.github_link)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å —Å–∞–π—Ç–∞ github —Å –≤–∞—à–∏–º –∫–æ–¥–æ–º")
    
    
    
@router.message(RegStudent.github_link)
async def get_github_link(message: Message, state: FSMContext):
    github_link = Validators.github_link_validate(message.text)
    if not github_link:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å")
        return
    
    await state.update_data(github_link=github_link)
    
    student_data = await state.get_data()
    
    student_text = f"""
     <b>    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>
     
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –±—É–¥—É—Ç
    –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å.
    
    üìå <i>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}:</i>
    1. –§–ò–û: {student_data['name_fio']}
    2. –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ{student_data['lab_number']}
    3. –ü–æ–¥–≥—Ä—É–ø–ø–∞-{student_data['sub_group']}
    4. –°—Å—ã–ª–∫–∞ –Ω–∞ github:\n  {student_data['github_link']}

    –î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã?
    """
    await message.answer(student_text, parse_mode="HTML", reply_markup=approve_data)
    
    
    
    # INLINE YES APPROVEMENT -> ADD STUDENT TO THE DATABASE
@router.callback_query(F.data == "approve_yes")
async def approve_yes(callback: CallbackQuery, state: FSMContext):
    
    await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—á–µ—Ä–µ–¥—å...")
    student_data = await state.get_data()
    
    try:
        await rq.add_student(
            user_tg_id=callback.message.from_user.id,
            username=callback.message.from_user.username,
            name_fio=student_data['name_fio'],
            lab_number=student_data['lab_number'],
            sub_group=student_data['sub_group'],
            github_link=student_data['github_link']
        )

        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥—å!üéâ\n"
                                      "–í–∞—à–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ\n'–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏üëÄ'",
                                      reply_markup=action_choose,
                                      parse_mode='HTML')
        
    
    except Exception as e:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö‚ùå\n"
                                      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=action_choose,
                                      parse_mode='HTML')
        
        print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ë–î: {e}\n")
        
    finally:
        await state.clear()
    
    

    

    # await rq.add_student()
    
